type Factory @entity {
  id: ID!
  engineCount: BigInt!
}

type Token @entity {
  id: ID!
  symbol: String!
  name: String!
  decimals: BigInt!
  totalSupply: BigInt!
}

type Pool @entity {
  id: ID!

  #Calibration parameters
  engine: Engine!
  strike: BigInt!
  strikeDecimal: BigDecimal!
  sigma: BigInt!
  sigmaDecimal: BigDecimal!
  tau: Int!
  maturity: Int!
  gamma: BigInt!

  #Pool Token Breakdown
  underlyingToken: Token!
  quoteToken: Token!
  liquidity: BigInt!
  reserveUnderlying: BigInt!
  reserveQuote: BigInt!

  # Incremented Fields
  txCount: Int!
  liquidityProviderCount: Int!
  feesCollectedUnderlying: BigInt!
  feesCollectedQuote: BigInt!
  invariant: BigInt!

  # Initialization Information
  createdAtTimestamp: Int!
  createdAtBlockNumber: Int!
  invariantStart: BigInt!
  initialUnderlying: BigInt!
  initialQuote: BigInt!
  initialLiquidity: BigInt!
  initialTau: Int!

  # Associated Transactions
  swaps: [Swap!] @derivedFrom(field: "pool")
  allocates: [Allocate!] @derivedFrom(field: "pool")
  removes: [Remove!] @derivedFrom(field: "pool")
}

type Engine @entity {
  id: ID!

  # Associated Entities
  pools: [Pool!]!
  underlyingToken: Token!
  quoteToken: Token!

  # Incremented Fields
  poolCount: Int!
  txCount: Int!

  # Initialization Information
  createdAtTimestamp: BigInt!
  createdAtBlockNumber: BigInt!
}

type Position @entity {
  id: ID!
  owner: Bytes!

  # Associated Entities
  pool: Pool!
  underlyingToken: Token!
  quoteToken: Token!

  # Position Breakdown
  liquidity: BigInt!
  depositedUnderlyingToken: BigInt!
  depositedQuoteToken: BigInt!
  withdrawnUnderlyingToken: BigInt!
  withdrawnQuoteToken: BigInt!

  # Incremented Fields
  invariantAtLastAllocate: BigInt!

  # Initialization Information
  invariantAtCreation: BigInt!
  initialLiquidity: BigInt!
  initialTau: Int!
  initialUnderlying: BigInt!
  initialQuote: BigInt!
}

type Allocate @entity {
  id: ID!

  # Transaction Information
  timestamp: Int!
  sender: String!
  transactionHash: String!

  # Associated Entities
  pool: Pool!

  # Transaction Breakdown
  underlyingTokenAmount: BigInt!
  quoteTokenAmount: BigInt!
  liquidityAmount: BigInt!
}

type Remove @entity {
  id: ID!

  # Transaction Breakdown
  timestamp: Int!
  sender: String!
  transactionHash: String!

  # Associated Entities
  pool: Pool!

  # Transaction Breakdown
  underlyingTokenAmount: BigInt!
  quoteTokenAmount: BigInt!
  liquidityAmount: BigInt!
}

type Swap @entity(immutable: true) {
  id: ID!

  # Associated Entities
  pool: Pool!

  # Transaction Information
  sender: String!
  transactionHash: String!
  riskyForStable: Boolean!
  deltaIn: BigInt!
  deltaOut: BigInt!
  amount: BigInt!
  timestamp: Int!
  tau: Int!

  # Transaction Breakdown
  totalUnderlying: BigInt!
  totalQuote: BigInt!
  totalLiquidity: BigInt!
}

type PoolHourData @entity {
  id: ID!
  date: Int!
  pool: Pool!
  underlyingToken: Token!
  quoteToken: Token!

  # reserves
  reserveUnderlying: BigInt!
  reserveQuote: BigInt!

  # total supply for LP historical returns
  liquidity: BigInt!

  # derived liquidity
  # reserveUSD: BigDecimal!

  # volume stats
  hourlyVolumeUnderlying: BigDecimal!
  hourlyVolumeQuote: BigDecimal!
  # dailyVolumeUSD: BigDecimal!
  hourlyTxns: BigInt!
}

# Data accumulated and condensed into day stats for each exchange
type PoolDayData @entity {
  id: ID!
  date: Int!
  pool: Pool!
  underlyingToken: Token!
  quoteToken: Token!

  # reserves
  reserveUnderlying: BigInt!
  reserveQuote: BigInt!

  # total supply for LP historical returns
  liquidity: BigInt!

  # derived liquidity
  # reserveUSD: BigDecimal!

  # volume stats
  dailyVolumeUnderlying: BigDecimal!
  dailyVolumeQuote: BigDecimal!
  # dailyVolumeUSD: BigDecimal!
  dailyTxns: BigInt!
}
